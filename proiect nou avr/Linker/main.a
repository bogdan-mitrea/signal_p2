;/*********************************************
;Project : Test software
;**********************************************
;Chip type: ATmega164A
;Clock frequency: 20 MHz
;Compilers:  CVAVR 2.x
;*********************************************/
;
;#include <mega164a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <stdio.h>
;#include <delay.h>
;#include <string.h>
;#include <stdlib.h>
;#include "defs.h"
;
;//*************************************************************************************************
;//*********** BEGIN SERIAL STUFF (interrupt-driven, generated by Code Wizard) *********************
;//*************************************************************************************************
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART0 Receiver buffer
;#define RX_BUFFER_SIZE0 8
;char rx_buffer0[RX_BUFFER_SIZE0];
;
;#if RX_BUFFER_SIZE0 <= 256
;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
;#else
;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
;#endif
;
;// This flag is set on USART0 Receiver buffer overflow
;bit rx_buffer_overflow0;
;
;//
;unsigned char cnt;     // interrupts count
;char key = 0xFF;              // key pressed
;unsigned char cnt_key; // number of keys pressed
;bit ok;                // check if command is ok
;char build_PF = 0x00;  // PF to be built and then transmitted
;char build_LED = 0x00; // LED to be built and then transmitted
;char error_LED = 0x8;
;char freq_test_LED = 0x4;
;char DTMF_test_LED = 0x2;

	.DSEG
;char stop_LED = 0x1;
;
;char read_keyboard(void);
;void write_LED(char a);
;void write_PF(char a);
;void build_PF_1(char a);
;void build_PF_2(char a);
;void build_PF_3(char a);
;//char read_LED(void);
;void MyApplication(void);
;
;//
;
;
;// USART0 Receiver interrupt service routine
;interrupt [USART0_RXC] void usart0_rx_isr(void)
; 0001 005E {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 005F char status,data;
; 0001 0060 status=UCSR0A;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0001 0061 data=UDR0;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0001 0062 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0001 0063    {
; 0001 0064    rx_buffer0[rx_wr_index0++]=data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0001 0065 #if RX_BUFFER_SIZE0 == 256
; 0001 0066    // special case for receiver buffer size=256
; 0001 0067    if (++rx_counter0 == 0) rx_buffer_overflow0=1;
; 0001 0068 #else
; 0001 0069    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0001 006A    if (++rx_counter0 == RX_BUFFER_SIZE0)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0001 006B       {
; 0001 006C       rx_counter0=0;
;PCODE: $00000026 VOL: 0
; 0001 006D       rx_buffer_overflow0=1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0001 006E       }
; 0001 006F #endif
; 0001 0070    }
;PCODE: $00000029 VOL: 0
; 0001 0071 }
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART0 Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0001 0078 {
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0001 0079 char data;
; 0001 007A while (rx_counter0==0);
;PCODE: $00000031 VOL: 0
;	data -> R17
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0001 007B data=rx_buffer0[rx_rd_index0++];
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0001 007C #if RX_BUFFER_SIZE0 != 256
; 0001 007D if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0001 007E #endif
; 0001 007F #asm("cli")
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
	cli
;PCODE: $00000042 VOL: 0
; 0001 0080 --rx_counter0;
;PCODE: $00000043 VOL: 0
; 0001 0081 #asm("sei")
;PCODE: $00000044 VOL: 0
	sei
;PCODE: $00000045 VOL: 0
; 0001 0082 return data;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0001 0083 }
;PCODE: $00000049 VOL: 0
;#pragma used-
;#endif
;
;// USART0 Transmitter buffer
;#define TX_BUFFER_SIZE0 8
;char tx_buffer0[TX_BUFFER_SIZE0];
;
;#if TX_BUFFER_SIZE0 <= 256
;unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
;#else
;unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
;#endif
;
;// USART0 Transmitter interrupt service routine
;interrupt [USART0_TXC] void usart0_tx_isr(void)
; 0001 0093 {
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0001 0094 if (tx_counter0)
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0001 0095    {
; 0001 0096    --tx_counter0;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0001 0097    UDR0=tx_buffer0[tx_rd_index0++];
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0001 0098 #if TX_BUFFER_SIZE0 != 256
; 0001 0099    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0001 009A #endif
; 0001 009B    }
;PCODE: $0000005F VOL: 0
; 0001 009C }
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART0 Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0001 00A3 {
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0001 00A4 while (tx_counter0 == TX_BUFFER_SIZE0);
;PCODE: $00000066 VOL: 0
;	c -> Y+0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0001 00A5 #asm("cli")
;PCODE: $0000006D VOL: 0
	cli
;PCODE: $0000006E VOL: 0
; 0001 00A6 if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0001 00A7    {
; 0001 00A8    tx_buffer0[tx_wr_index0++]=c;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0001 00A9 #if TX_BUFFER_SIZE0 != 256
; 0001 00AA    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0001 00AB #endif
; 0001 00AC    ++tx_counter0;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0001 00AD    }
; 0001 00AE else
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0001 00AF    UDR0=c;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0001 00B0 #asm("sei")
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
	sei
;PCODE: $0000008E VOL: 0
; 0001 00B1 }
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;#pragma used-
;#endif
;//*************************************************************************************************
;//********************END SERIAL STUFF (USART0)  **************************************************
;//*************************************************************************************************
;//*******   if you need USART1, enable it in Code Wizard and copy coresponding code here  *********
;//*************************************************************************************************
;
;/*
; * Timer 1 Output Compare A interrupt is used to blink LED
; */
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0001 00BE {
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0001 00BF 
; 0001 00C0 cnt=(cnt+1)%50;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0001 00C1 if (cnt==0) LED1 = ~LED1; // invert LED
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0001 00C2 //
; 0001 00C3  MyApplication();
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0001 00C4 }
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;
;/*
; * main function of program
; */
;void main (void)
; 0001 00CA {
;PCODE: $000000AC VOL: 0
; 0001 00CB unsigned char temp,i;
; 0001 00CC 
; 0001 00CD     Init_initController();  // this must be the first "init" action/call!
;	temp -> R17
;	i -> R16
;PCODE: $000000AD VOL: 0
; 0001 00CE     #asm("sei")             // enable interrupts
;PCODE: $000000AE VOL: 0
	sei
;PCODE: $000000AF VOL: 0
; 0001 00CF     LED1 = 1;               // initial state, will be changed by timer 1
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0001 00D0 
; 0001 00D1     cnt_key = 0;
;PCODE: $000000B2 VOL: 0
; 0001 00D2     ok = 1;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0001 00D3 
; 0001 00D4     while(TRUE)
;PCODE: $000000B5 VOL: 0
; 0001 00D5     {
; 0001 00D6 
; 0001 00D7         wdogtrig();            // call often else processor will reset
;PCODE: $000000B6 VOL: 0
	wdr
;PCODE: $000000B7 VOL: 0
; 0001 00D8         if(rx_counter0)     // if a character is available on serial port USART0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0001 00D9         {
; 0001 00DA             temp = getchar();
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0001 00DB             if(temp == '?')
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0001 00DC                 printf("\r\nSwVersion:%d.%d\r\n", SW_VERSION/10, SW_VERSION%10);
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0001 00DD             else
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0001 00DE                 putchar(temp+1);        // echo back the character + 1 ("a" becomes "b", etc)
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0001 00DF         }
;PCODE: $000000CF VOL: 0
; 0001 00E0 
; 0001 00E1         if(SW1 == 0)        // pressed
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0001 00E2         {
; 0001 00E3             delay_ms(30);   // debounce switch
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0001 00E4             if(SW1 == 0)
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0001 00E5             {                // LED will blink slow or fast
; 0001 00E6                 while(SW1==0)
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0001 00E7                     wdogtrig();    // wait for release
;PCODE: $000000DE VOL: 0
	wdr
;PCODE: $000000DF VOL: 0
; 0001 00E8                 // alternate between values and values/4 for OCR1A register
; 0001 00E9                 // 0186 H / 4 = 0061 H
; 0001 00EA                 // new frequency = old frequency * 4
; 0001 00EB                 if(OCR1AH == 0x01)
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0001 00EC                     {TCNT1H=0; TCNT1L=0; OCR1AH = 0x00; OCR1AL = 0x61;}
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0001 00ED                 else
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0001 00EE                     {TCNT1H=0; TCNT1L=0; OCR1AH = 0x01; OCR1AL = 0x86;}
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0001 00EF             }
; 0001 00F0         }
;PCODE: $000000F8 VOL: 0
; 0001 00F1 
; 0001 00F2         // measure time intervals on oscilloscope connected to pin TESTP
; 0001 00F3         for(i=0; i<3; i++) {
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0001 00F4             TESTP = 1;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0001 00F5             delay_us(1);
;PCODE: $00000105 VOL: 0
; 0001 00F6             TESTP = 0;   // may check accuracy of 1us interval on oscilloscope
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0001 00F7         }
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0001 00F8     }
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0001 00F9 
; 0001 00FA 
; 0001 00FB }// end main loop
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;
;/*******************************************
;My application function
;
;********************************************/
;void MyApplication (void)
; 0001 0102 {
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0001 0103     char prev_key=key;
; 0001 0104     key = read_keyboard();
;PCODE: $00000114 VOL: 0
;	prev_key -> R17
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0001 0105     if(key != 0xFF && prev_key == 0xFF) {
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0001 0106 
; 0001 0107     if(ok == 0)
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0001 0108     {
; 0001 0109         if(key == 0x0F) {
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0001 010A             cnt_key = 0;
;PCODE: $00000129 VOL: 0
; 0001 010B             ok = 1;
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0001 010C             write_LED(error_LED);
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0001 010D             return;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0001 010E         }
; 0001 010F         if(key != 0x0F) return;
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0001 0110     }
;PCODE: $00000136 VOL: 0
; 0001 0111 
; 0001 0112     switch (cnt_key)
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0001 0113     {
; 0001 0114         case 0:
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0001 0115         {
; 0001 0116             build_PF = 0;
;PCODE: $0000013C VOL: 0
; 0001 0117             build_LED = 0;
;PCODE: $0000013D VOL: 0
; 0001 0118             write_PF(0); // sets PF to initial command
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0001 0119             write_LED(0); // sets LEDs to LOW
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0001 011A             if(key == 0x0F) {
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0001 011B                 cnt_key = 0;
;PCODE: $00000145 VOL: 0
; 0001 011C                 ok = 1;
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0001 011D                 write_LED(error_LED);
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0001 011E                 return;
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0001 011F             }
; 0001 0120             if(key > 0x3) ok = 0;
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0001 0121             else {
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0001 0122                 cnt_key++;
;PCODE: $00000154 VOL: 0
; 0001 0123                 build_PF_1(key);
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0001 0124             }
;PCODE: $00000157 VOL: 0
; 0001 0125         }
; 0001 0126         break;
;PCODE: $00000158 VOL: 0
; 0001 0127 
; 0001 0128         case 1:
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0001 0129         {
; 0001 012A             if(key < 0x1 || key > 0x3) ok = 0;
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0001 012B             else switch(key)
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0001 012C             {
; 0001 012D                 case 1:
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0001 012E                 {
; 0001 012F                     cnt_key++;
;PCODE: $0000016C VOL: 0
; 0001 0130                     build_LED = freq_test_LED;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0001 0131                     build_PF_2(key);
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0001 0132                 }
; 0001 0133                 break;
;PCODE: $00000171 VOL: 0
; 0001 0134 
; 0001 0135                 case 2:
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0001 0136                 {
; 0001 0137                     cnt_key++;
;PCODE: $00000175 VOL: 0
; 0001 0138                     build_LED = DTMF_test_LED;
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0001 0139                     build_PF_2(key);
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0001 013A                 }
; 0001 013B                 break;
;PCODE: $0000017A VOL: 0
; 0001 013C 
; 0001 013D                 case 3:
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0001 013E                 {
; 0001 013F                     cnt_key++;
;PCODE: $0000017E VOL: 0
; 0001 0140                     build_LED = stop_LED;
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0001 0141                     build_PF_2(key);
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0001 0142                 }
; 0001 0143                 break;
;PCODE: $00000183 VOL: 0
; 0001 0144             }
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0001 0145         }
; 0001 0146         break;
;PCODE: $00000186 VOL: 0
; 0001 0147 
; 0001 0148         case 2:
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0001 0149         {
; 0001 014A             if(build_LED == stop_LED)
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0001 014B             {
; 0001 014C                 if(key != 0x0F) ok = 0;
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0001 014D                 else {
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0001 014E                     cnt_key = 0;
;PCODE: $00000194 VOL: 0
; 0001 014F                     write_PF(build_PF);
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0001 0150                     write_LED(build_LED);
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0001 0151                 }
;PCODE: $00000199 VOL: 0
; 0001 0152             }
; 0001 0153             else if(build_LED == freq_test_LED)
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0001 0154             {
; 0001 0155                 if(key > 0x7) ok = 0;
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0001 0156                 else {
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0001 0157                     cnt_key++;
;PCODE: $000001A6 VOL: 0
; 0001 0158                     build_PF_3(key);
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0001 0159                 }
;PCODE: $000001A9 VOL: 0
; 0001 015A             }
; 0001 015B             else if(build_LED == DTMF_test_LED)
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0001 015C             {
; 0001 015D                 cnt_key++;
;PCODE: $000001AF VOL: 0
; 0001 015E                 build_PF_3(key);
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0001 015F             }
; 0001 0160         }
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0001 0161         break;
;PCODE: $000001B5 VOL: 0
; 0001 0162 
; 0001 0163         case 3:
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0001 0164         {
; 0001 0165             if(key != 0x0F) ok = 0;
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0001 0166             else {
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0001 0167                 cnt_key = 0;
;PCODE: $000001C0 VOL: 0
; 0001 0168                 write_PF(build_PF);
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0001 0169                 write_LED(build_LED);
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0001 016A             }
;PCODE: $000001C5 VOL: 0
; 0001 016B         }
; 0001 016C         break;
;PCODE: $000001C6 VOL: 0
; 0001 016D     }
;PCODE: $000001C7 VOL: 0
; 0001 016E     }
; 0001 016F }
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;
;// initial MyApplication():
;/*
;  key=read_keyboard();
;if (key!=-1)
;    {
;    write_LED(key);
;    //write_PF(key);
;    }
;//key=read_PF();
;//write_LED(key);
;write_PF(key);
;*/
;
;/*******************************************
;Other functions
;
;*******************************************/
;
;char read_keyboard(void)
; 0001 0184 {
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0001 0185 // line 0 - PA0,  line 1 - PA1,  line 2 - PA2,  line 3 - PA3 - outputs
; 0001 0186 char scan[4]={0xFE,0xFD,0xFB, 0xF7};
; 0001 0187 char row,col;
; 0001 0188 char cod=0xFF;
; 0001 0189 
; 0001 018A for (row=0; row<4; row++)
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;	scan -> Y+4
;	row -> R17
;	col -> R16
;	cod -> R19
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0001 018B {
; 0001 018C PORTA=scan[row];        //se modifica doar PA0-3
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0001 018D delay_us(1);
;PCODE: $000001E9 VOL: 0
; 0001 018E // col 0 - PA4,  col 1 - PA5,  col 2 - PA6,  col 3 - PA7 - inputs
; 0001 018F col=PINA>>4;
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0001 0190 if (col!=0x0F)
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0001 0191     {
; 0001 0192     if (col==0x0E) col=0;
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0001 0193     if (col==0x0D) col=1;
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0001 0194     if (col==0x0B) col=2;
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0001 0195     if (col==0x07) col=3;
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0001 0196     cod=4*row+col;
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0001 0197     break;
;PCODE: $0000020D VOL: 0
; 0001 0198     }
; 0001 0199 }
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0001 019A return cod;
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0001 019B }
;PCODE: $00000218 VOL: 0
;
;void write_LED(char a)
; 0001 019E {
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0001 019F // write PORTB bits 3-0 with a 4 bits value a3-a0
; 0001 01A0 char val;
; 0001 01A1 val=a & 0x0F;
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;	a -> Y+1
;	val -> R17
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0001 01A2 PORTB=(PORTB & 0xF0) | val;
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0001 01A3 }
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;
;void write_PF(char a)
; 0001 01A6 {
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0001 01A7 // write PORTC bits 7-0 with a 8 bits value a7-a0
; 0001 01A8 PORTC = a;
;PCODE: $0000022B VOL: 0
;	a -> Y+0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0001 01A9 }
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;
;void build_PF_1(char a)
; 0001 01AC {
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0001 01AD // write x bits 7-6 with a 2 bits value a1-a0
; 0001 01AE char val;
; 0001 01AF val = a & 0x03;
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;	a -> Y+1
;	val -> R17
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0001 01B0 build_PF = (build_PF & 0x3F) | (val << 6);
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0001 01B1 }
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;
;void build_PF_2(char a)
; 0001 01B4 {
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
; 0001 01B5 // write x bits 5-4 with a 2 bits value a1-a0
; 0001 01B6 char val;
; 0001 01B7 val = a & 0x03;
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;	a -> Y+1
;	val -> R17
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
; 0001 01B8 build_PF = (build_PF & 0xCF) | (val << 4);
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
; 0001 01B9 }
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;
;void build_PF_3(char a)
; 0001 01BC {
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
; 0001 01BD // write x bits 3-0 with a 4 bits value a3-a0
; 0001 01BE char val;
; 0001 01BF val=a & 0x0F;
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;	a -> Y+1
;	val -> R17
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0001 01C0 build_PF = (build_PF & 0xF0) | val;
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0001 01C1 }
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;
;/*
;char read_LED(void)
;{
;// read PORTB bits 3-0
;char val;
;val= PINB & 0x0F;
;return val;
;}
;*/
;
;//codul cu 4 biti write, 4 biti read PF
;/*
;void write_PF(char a)
;{
;// write PORTC bits 3-0 with a 4 bits value a3-a0
;char val;
;val=a & 0x0F;
;PORTC=(PORTC & 0xF0) | val;
;}
;
;char read_PF(void)
;{
;// read PORTB bits 3-0
;char val;
;val= PINB & 0x0F;
;return val;
;}
;*/
